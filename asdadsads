import itertools

def find_all_paths(matrix, start_point, max_distance, min_demand):
    n = len(matrix)
    points = list(range(n))
    points.remove(start_point)  
    paths = []

    
    def generate_combinations():
        for r in range(1, n):
            for combination in itertools.permutations(points, r):
                yield (start_point,) + combination + (start_point,)  

    
    def check_path_distance_demand(path):
        distance = sum(matrix[path[i]][path[i+1]] for i in range(len(path)-1))
        demand = sum(demand_matrix[point] for point in path[1:-1])   
        if distance <= max_distance and demand >= min_demand:
            paths.append((path, demand))

    
    combinations = generate_combinations()

    
    for combination in combinations:
        check_path_distance_demand(combination)

    return paths

# Przykład użycia
distance_matrix = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]
demand_matrix = [0, 5, 10, 8]  
start_point = 0
max_distance = 150
min_demand = 15  

result = find_all_paths(distance_matrix, start_point, max_distance, min_demand)
print("Znalezione trasy:")
for path, demand in result:
    print("Trasa:", path)
    print("Sumaryczne zapotrzebowanie:", demand)
    print()
